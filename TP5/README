O objetivo desse exercício é praticar e entender um pouco mais os conceitos de Árvores Binárias de Pesquisa (BST). Você deverá desenvolver um programa que irá armazenar uma coleção de alunos utilizando essa estrutura. Para isso, você deverá implementar dois TADs utilizando Structs: Aluno e BST.

Aluno será usado guardar dois atributos: matricula (do tipo inteiro) e nome (do tipo string). Deve ser feito um construtor que recebe esses dois atributos como parâmetros nessa ordem. Lembre-se de também implementar os métodos auxiliares get/set (utilize a notação com underline). Além disso, deve ser criado um método 'void imprimir_dados()' que imprime essas duas informações separas por um espaço simples.

Você pode começar a implementação da struct BST usando a implementação mostrada na aula. Em seguida, você deverá fazer as adaptações necessárias para que cada nó agora guarde uma variável do tipo Aluno. Além disso, o TAD deve possuir um construtor padrão sem parâmetros e implementar as seguintes funções:
'void inserir_aluno(Aluno aluno)': responsável inserir um novo aluno na árvore. A inserção deve utilizar a matrícula do aluno para comparação das chaves e decisão de onde colocar o elemento na árvore.

'void imprimir_arvore()': imprime todos os alunos da árvore ordenados de acordo com a matrícula. Para cada aluno deve-se chamar o método 'imprimir_dados()'.

'Aluno* procurar_aluno(int matricula)': procura se um aluno com determinada matrícula faz parte da árvore. Caso o aluno esteja na árvore deve ser retornado um ponteiro para o seu endereço de memória, caso contrário, deve-se retornar 'nullptr'.

Você é livre para implementar quaisquer outros métodos auxiliares nos TADs que julgar necessário. No arquivo main.cpp você deve implementar toda a parte de entrada/saída que será responsável por receber uma lista de alunos, preencher a árvore e imprimir seu estado atual ao final pelo método 'imprimir_arvore()'. 

Exemplo de entrada/saída:

input = 
2015999000 Marcos
2015888999 Daniel
2015777888 Fernanda
2015666777 Gabriel
2015555666 Joana
2015444555 Carolina
2015333444 Felipe
2015222333 Carlos
2015111222 Maria
2015000111 João

output =
2015000111 João
2015111222 Maria
2015222333 Carlos
2015333444 Felipe
2015444555 Carolina
2015555666 Joana
2015666777 Gabriel
2015777888 Fernanda
2015888999 Daniel
2015999000 Marcos

ATENÇÃO: no VPL (Moodle), junto com a saída é impresso uma verificação básica com alguns valores que não são informados na entrada, você pode ignorá-los. Se você testar localmente na sua máquina esses valores não aparecerão.

Arquivos requeridos: main.cpp, Aluno .hpp Aluno .cpp BST.hpp BST.cpp

O código da verificação básica pode ser copiado aqui, caso você queira depurar algo localmente.